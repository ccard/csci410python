// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * In this game you can move a black square around the screen and
 * change its size during the movement.
 * In the beginning, the square is located at the top-left corner
 * of the screen. The arrow keys are used to move the square.
 * The 'z' & 'x' keys are used to decrement and increment the size.
 * The 'q' key is used to quit the game.
 */
class SnakeGame {

    // The snake
    field Snake snake;

    field Food feed;

    field int speed;

    field int fedMove;

    // The square's movement direction
    field int direction; // 0=none,1=up,2=down,3=left,4=right

    /** Constructs a new Square Game. */
    constructor SnakeGame new() {
        let snake = Snake.new(0, 0, 30);
        let feed = Food.new(50,50);
        let direction = 0;
        let fedMove = 5;
        let speed = 50;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do square.dispose();
        do feed.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the square's movement, direction and size. */
    method void run() {
        var char key;
        var boolean exit;

        do feed.draw();

        let exit = false;

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSnake();
                do feed.draw();
                if (containsX() & containsY())
                { 
                    do Output.printString("hi there");
                    do feed.set_xy(feed.getX()+fedMove,feed.getY()+fedMove);
                    let fedMove = fedMove*3;
                    let fedMove = fedMove/2;
                    let fedMove = (~fedMove)+1;
                    do incSpeed();
                    do feed.erase();
                    do feed.draw();
                }
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSnake();
                do feed.draw();
                if (containsX() & containsY())
                { 
                    do Output.printString("hi there");
                    do feed.set_xy(feed.getX()+fedMove,feed.getY()+fedMove);
                    let fedMove = fedMove*3;
                    let fedMove = fedMove/2;
                    let fedMove = (~fedMove)+1;
                    do incSpeed();
                    do feed.erase();
                    do feed.draw();
                }
            }
        }   
        return;
    }

    method void incSpeed()
    {
        let speed = speed - 4;
        return;
    }

    method boolean containsX()
    {
        var int temp;
        var boolean less;
        var boolean greater;
        var boolean equal;
        let less = false;
        let greater = false;
        let equal = false;
        if(snake.getX() < feed.getX())
        {
            let greater = true;
        }
        else
        {
            if(snake.getX() = feed.getX())
            {
                let equal = true;
            }
        }

        let temp = snake.getX()+snake.getSize();
        if(feed.getX() < temp)
        {
            let less = true;
        }
        else
        {
            if(temp = feed.getX())
            {
                let equal = true;
            }
        }

        let less = less & greater;
        let less = less | equal;
        return less;
    }

    method boolean containsY()
    {
        var int temp;
        var boolean less;
        var boolean greater;
        var boolean equal;
        let less = false;
        let greater = false;
        let equal = false;
        if(snake.getY() < feed.getY())
        {
            let greater = true;
        }
        else
        {
            if(snake.getY() = feed.getY())
            {
                let equal = true;
            }
        }

        let temp = snake.getY()+snake.getSize();
        if(feed.getY() < temp)
        {
            let less = true;
        }
        else
        {
            if(temp = feed.getY())
            {
                let equal = true;
            }
        }

        let less = less & greater;
        let less = less | equal;
        return less;
    }

    /** Moves the square by 2 pixels in the current direction. */
    method void moveSnake() {
        if (direction = 1) {
            do snake.moveUp();
        }
        if (direction = 2) {
            do snake.moveDown();
        }
        if (direction = 3) {
            do snake.moveLeft();
        }
        if (direction = 4) {
            do snake.moveRight();
        }

        do Sys.wait(speed); // Delays the next movement.
        return;
    }
}
